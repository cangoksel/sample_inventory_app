group = "com.github.cangoksel"

apply plugin: "java"
apply plugin: "groovy"
apply plugin: "jacoco"
apply plugin: "org.springframework.boot"
apply plugin: "idea"
apply from: "$rootDir/gradle/versioning.gradle"
apply from: "$rootDir/gradle/provided.gradle"

sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.junit.reportsPath", "$buildDir/test-results/"
        property "sonar.groovy.binaries", "$buildDir/jacoco/"
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(GroovyCompile) {
    options.encoding = 'UTF-8'
}
sourceSets {
    main {
        java {
            srcDir 'src/main/generated'
        }
    }
}

idea {
    module {
        sourceDirs += file("${buildDir}/classes/main/generated")
    }
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
[compileGroovy, compileTestGroovy]*.options*.encoding = 'UTF-8'

configurations {
    compile.exclude module: 'spring-boot-starter-logging'
}

configurations.all({
    resolutionStrategy {
        eachDependency { DependencyResolveDetails details ->
            if (details.requested.group == "org.codehaus.groovy") {
                details.useVersion "${groovyVersion}"
            }

            if (details.requested.group == "org.hibernate" && details.requested.name == "hibernate-entitymanager") {
                details.useVersion "${hibernateVersion}"
            }
        }
    }
})

jacoco {
    toolVersion = "0.7.4.201502262128"
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/jacocoHtml"
    }
}

repositories {
    jcenter()
}
dependencies {
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-data-mongodb')
    compile('org.springframework.security:spring-security-core')
    compile('com.fasterxml.jackson.core:jackson-databind')
    compile('org.hibernate:hibernate-validator')
    compile("org.hibernate:hibernate-core:${hibernateVersion}")
    compile("org.hibernate:hibernate-envers:${hibernateVersion}")
    compile("org.hibernate:hibernate-java8:${hibernateVersion}")
    compile("org.hibernate:hibernate-search-orm:${hibernateSearchVersion}")
    compile("commons-beanutils:commons-beanutils:${beanUtilsVersion}")
    compile("org.apache.commons:commons-compress:${compressVersion}")

    compile("com.querydsl:querydsl-jpa:${queryDslVersion}")
    provided "com.querydsl:querydsl-apt:${queryDslVersion}:jpa"
    testCompile("javax.el:javax.el-api:3.0.0")
    testCompile("org.glassfish:javax.el:3.0.0")



    //Logging Dependencies
    //compile('org.springframework.boot:spring-boot-starter-log4j2')
    compile("ch.qos.logback.contrib:logback-mongodb-classic:0.1.2")
    compile("com.google.guava:guava:${guavaVersion}")

    compile("javax.money:money-api:${javaMoneyVersion}")
    compile("org.javamoney:moneta:${javaMoneyVersion}")
    compile("org.freemarker:freemarker:${freemarkerVersion}")

    provided("org.projectlombok:lombok:$lombokVersion")

    // Testing Dependencies
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile("org.codehaus.groovy:groovy-all:${groovyVersion}")
    testCompile("com.relevantcodes:extentreports:${extentReportVersion}")
    testCompile("org.spockframework:spock-core:${spockVersion}") {
        exclude(module: 'junit-dep')
    }
    testCompile("org.spockframework:spock-spring:${spockVersion}")
    testCompile("com.anotherchrisberry:spock-retry:0.6.1")
    testRuntime("cglib:cglib-nodep:${cglibNodepVersion}")
}